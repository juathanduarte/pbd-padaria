/*# SCRIPT REFERENTE AO TRABLHO PROPOSTO NA DISCIPLINA PROJETO DE BANCO DE DADOS
SCRIPT RELACIONADO AO DER CRIADO EM AULA;

GRUPO 7 - PADARIA
Integrandes:
GUILHERME DALLMANN LIMA
JUATHAN COELHO DUARTE
JOÃO PAULO*/

CREATE TABLE PESSOA(
    IDPESSOA SERIAL PRIMARY KEY UNIQUE NOT NULL,
    NOME VARCHAR(30) NOT NULL,
    TELEFONE VARCHAR(12),
    EMAIL VARCHAR(40),
    CPF VARCHAR(14) UNIQUE NOT NULL 
);


CREATE TABLE FUNCIONARIO(
    IDFUNCIONARIO SERIAL UNIQUE NOT NULL PRIMARY KEY,
;    CARGO VARCHAR(20) NOT NULL,
    SALARIO FLOAT NOT NULL,
    CARTEIRATRABALHO VARCHAR(20) UNIQUE NOT NULL,
    ID_PESSOA INT UNIQUE NOT NULL,
    CONSTRAINT FK_PESSOA_FUNCIONARIO FOREIGN KEY (ID_PESSOA) REFERENCES 
    PESSOA(IDPESSOA)
);

CREATE TABLE CLIENTE(
    IDCLIENTE SERIAL UNIQUE NOT NULL PRIMARY KEY,
    ID_PESSOA INT UNIQUE NOT NULL,
    CONSTRAINT FK_PESSOA_CLIENTE FOREIGN KEY (ID_PESSOA) REFERENCES 
    PESSOA(IDPESSOA)
);

CREATE TABLE PRODUTO(
    IDPRODUTO SERIAL PRIMARY KEY UNIQUE NOT NULL,
    NOME VARCHAR(40) NOT NULL,
    VALOR FLOAT NOT NULL,
    VALIDADE DATE NOT NULL,
    TIPO VARCHAR(20),
    QUANTIDADE INT NOT NULL
);

CREATE TABLE FORNECEDOR(
    IDFORNECEDOR SERIAL PRIMARY KEY UNIQUE NOT NULL,
    NOME VARCHAR(40) NOT NULL,
    TELEFONE VARCHAR(12),
    ENDERECO  VARCHAR(40),
    EMAIL VARCHAR(50),
    CNPJ VARCHAR(15) UNIQUE NOT NULL
);

CREATE TABLE CESTA(
IDCESTA SERIAL NOT NULL UNIQUE PRIMARY KEY,
ID_PRODUTO INT NOT NULL,
ID_CLIENTE INT NOT NULL,
QNT_ITEM INT NOT NULL,
CONSTRAINT FK_PRODUTO_CESTA FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO(IDPRODUTO),
CONSTRAINT FK_CLIENTE_CESTA FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE FORNECE(
    IDFORNECE SERIAL NOT NULL UNIQUE PRIMARY KEY,
    ID_PRODUTO INT NOT NULL,
    ID_FORNECEDOR INT NOT NULL,
    QNT_ITEM INT NOT NULL,
    VALOR_ITEM FLOAT NOT NULL,
    CONSTRAINT FK_PRODUTO_FORNECE FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(IDPRODUTO),
    CONSTRAINT FK_FORNECEDOR_FORNECE FOREIGN KEY(ID_FORNECEDOR) REFERENCES FORNECEDOR(IDFORNECEDOR)
);


--INSERINDO DADOS TABELA PESSOA
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('GUILHERME', '5399133232', 'GUILHERME@GAMIL.COM', '68586604120');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('ALBERTO', '53991326532', 'ALBERTO@GAMIL.COM', '21124604120');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('BIANCA', '53981523698', 'BIANCA@GAMIL.COM', '29982745875');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('CASSIO', '53932230710', 'CASSIO@GAMIL.COM', '28889217820');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('DIOGO', '53991656541', 'DIOGO@GAMIL.COM', '38782887861');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('ELISA', '53981546987', 'ELISA@GAMIL.COM', '31514072858');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('FELIPE', '53941236578', 'FELIPE@GAMIL.COM', '40064061850');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('HENRIQUE', '53955165493', 'HENRIQUE@GAMIL.COM', '13672929808');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('IURI', '53951684552', 'IURI@GAMIL.COM', '36907694859');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('JOANA', '53932245698', 'JOANA@GAMIL.COM', '17215309835');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('KAYLE', '53981123564', 'KAYLE@GAMIL.COM', '29815252801');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('LUIS', '53991563210', 'LUIS@GAMIL.COM', '34343269876');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('MARIA', '53942456263', 'MARIA@GAMIL.COM', '08845874877');
INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES('NICOLAS', '53951337572', 'NICOLAS@GAMIL.COM', '48406289805');

--INSERINDO DADOS TABELA CLIENTE
INSERT INTO CLIENTE(ID_PESSOA) VALUES(14);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(9);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(6);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(13);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(2);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(11);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(8);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(5);
INSERT INTO CLIENTE(ID_PESSOA) VALUES(10);


--INSERINDO DADOS TABELA FUNCIONARIO
INSERT INTO FUNCIONARIO(ID_PESSOA, CARGO, SALARIO, CARTEIRATRABALHO) VALUES(1,'PADEIRO', 2000.00, '123456789010');
INSERT INTO FUNCIONARIO(ID_PESSOA, CARGO, SALARIO, CARTEIRATRABALHO) VALUES(3,'GERENTE',4000.50,'98765432101');
INSERT INTO FUNCIONARIO(ID_PESSOA, CARGO, SALARIO, CARTEIRATRABALHO) VALUES(4,'ATENDENTE',1550.30,'78546923104');
INSERT INTO FUNCIONARIO(ID_PESSOA, CARGO, SALARIO, CARTEIRATRABALHO) VALUES(7,'DONO',8000.00,'98654120354');
INSERT INTO FUNCIONARIO(ID_PESSOA, CARGO, SALARIO, CARTEIRATRABALHO) VALUES(12, 'PADEIRO',3000.0,'02136541023');

--INSERINDO DADOS TABELA FORNECEDOR
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('DONA  BENTA','53942321511','Rua Aloiso feira neto, 10','DONABENTA@GMAIL.COM','069478920001');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('BUSCOPAN','53984563212','Rua gustavo feira, 50','BUSCOPAN@GMAIL.COM','469475430321');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('DAMBY','53972510147','Rua Abrilino ferreira, 230','DAMBY@GMAIL.COM','569477899321');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('QUATA','53972415213','Avenida Duque de Caxias, 223','QUATA@GMAIL.COM','204474322041');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('SADIA','53991547896','Rua XV Paulo, 12','SADIA@GMAIL.COM','169667829042');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('TRADICAO','53989645412','Rua Dom Pedro 2, 130','TRADICAO@GMAIL.COM','032145254311');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('QUALY','53912344556','Avenida Bento Goncalves, 321','QUALY@GMAIL.COM','939478920432');
INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES('BIRI','53997874521','Avenida Bento Goncalves, 609','BIRI@GMAIL.COM','849478920321');

--INSERINDO PRODUTOS
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('PÃO', 9.9, '12/12/2022', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('PASTEL', 4.5, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('BOLO', 10, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('REQUEIJAO', 3.43, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('MARGARINA', 4, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('MAIONESE', 3, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('PRESUNTO', 12, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('QUEIJO', 17, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('MORTADELA', 6, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('QUEIJO CHEEDAR', 23, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('REFRI', 8, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('CAFÉ', 5, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('COXINHA', 4, '12/12/2023', 'PERICIVEL', 0);
INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES('ROCOMBOLE', 9, '12/12/2023', 'PERICIVEL', 0);

--FUNÇÃO PARA DESCONTAR AUTOMATICAMENTE DA TABELA PRODUTO
CREATE OR REPLACE FUNCTION DESCONTO_ESTOQUE() RETURNS TRIGGER
AS 
$$
DECLARE 
	QNT INTEGER;
BEGIN
	SELECT QUANTIDADE FROM PRODUTO 
	WHERE IDPRODUTO = NEW.ID_PRODUTO INTO QNT;
	IF QNT < NEW.QNT_ITEM THEN
		RAISE EXCEPTION 'QUANTIDADE INDISPONÍVEL EM ESTOQUE.';
	ELSE
		UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE - NEW.QNT_ITEM
		WHERE IDPRODUTO = NEW.ID_PRODUTO;
	END IF;
	RETURN NEW;
END
$$ LANGUAGE PLPGSQL;


--TRIGGER DESCONTO ESTOQUE PELA COMPRA DA CESTA
CREATE TRIGGER T_DESCONTO_ESTOQUE
BEFORE INSERT ON CESTA
FOR  EACH ROW
EXECUTE PROCEDURE DESCONTO_ESTOQUE();

--FUNÇÃO DE AUTO INCREMENTO NA TABELA PRODUTO
CREATE OR REPLACE FUNCTION INCREMENTA_ESTOQUE() RETURNS TRIGGER
AS 
$$
DECLARE 
	QNT INTEGER;
BEGIN
	SELECT QUANTIDADE FROM PRODUTO 
	WHERE IDPRODUTO = NEW.ID_PRODUTO INTO QNT;
	UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE + NEW.QNT_ITEM
	WHERE IDPRODUTO = NEW.ID_PRODUTO;
	RETURN NEW;
END
$$ LANGUAGE PLPGSQL;


--TRIGGER ADIÇÃO DO ESTOQUE PELO FORNECEDOR
CREATE TRIGGER T_INCREMENTA_ESTOQUE
AFTER INSERT ON FORNECE
FOR  EACH ROW
EXECUTE PROCEDURE INCREMENTA_ESTOQUE();


--INSERÇÃO DOS PRODUTOS NO ESTOQUE
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(1, 2, 40, 6.0);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(2, 1, 40, 4.0);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(3, 2, 40, 5.0);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(4, 3, 20, 8.0);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(5, 4, 30, 4.1);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(6, 5, 45, 2.0);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(7, 6, 60, 3.0);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(8, 7, 10, 10);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(9, 8, 30, 40);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(10, 3, 32, 4.9);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(11, 6, 13, 5.9);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(12, 5, 19, 22.94);
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(13, 8, 29, 4.54); 
INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM)
VALUES(14, 1, 11, 4.32);

--INSERÇÃO DE PRODUTOS NA CESTA
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(1, 1, 5);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(2, 1, 1);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(1, 3, 3);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(3, 1, 2);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(1, 4, 8);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(2, 5, 1);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(1, 1, 10);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(2, 3, 2);
INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM)
VALUES(6, 6, 3);


--1° CONSULTA, VERIFICANDO O NOME E O CARGO DOS FUNCIONARIOS
SELECT NOME, CARGO FROM PESSOA
INNER JOIN FUNCIONARIO
ON IDPESSOA = IDFUNCIONARIO;

--2° CONSULTA VALIDANDO O TOTAL VENDIDO DA TABELA CESTA E O 
--VALOR QUE RETORNOU

SELECT P.NOME AS PRODUTO, SUM(QNT_ITEM * VALOR) AS TOTAL_VENDIDO
FROM CESTA
INNER JOIN PRODUTO AS P
ON IDPRODUTO = ID_PRODUTO
GROUP BY IDPRODUTO;

---3° CONSULTA PARA VERIFICAR QUAL CLIENTE COMPROU MAIS
SELECT PE.NOME, SUM(QNT_ITEM) AS TOTAL
FROM PESSOA AS PE
INNER JOIN CLIENTE AS CLI
ON PE.IDPESSOA = CLI.ID_PESSOA
INNER JOIN CESTA CEST
ON CEST.ID_CLIENTE = CLI.IDCLIENTE
GROUP BY PE.NOME ORDER BY SUM(QNT_ITEM) DESC; 


--4° CONSULTA PRA VER TODOS OS DADOS DO FUNCIONARIO
SELECT P.NOME, P.TELEFONE, P.EMAIL, P.CPF, F.CARGO, F.SALARIO, F.CARTEIRATRABALHO
FROM PESSOA AS P
INNER JOIN FUNCIONARIO AS F
ON IDPESSOA = IDFUNCIONARIO;

--5° CONSULTA PARA VER O NOME DO PRODUTO E O PREÇO
SELECT NOME, VALOR FROM PRODUTO;

--6° CONSULTA PARA VER OS FORNECEDORES CADASTRADO NO BANCO
SELECT NOME FROM FORNECEDOR;


--ATUALIZANDO VALOR DO PREÇO 
CREATE FUNCTION ATUALIZA(IN NOME_PRODUTO VARCHAR(30), IN VALOR_NEW FLOAT) RETURNS FLOAT
AS $$
	DECLARE
		ID_PRODUTO_NOVO INTEGER;
    BEGIN
		SELECT PRO.IDPRODUTO FROM PRODUTO AS PRO WHERE PRO.NOME ILIKE NOME_PRODUTO INTO ID_PRODUTO_NOVO;
        UPDATE PRODUTO SET VALOR = VALOR_NEW WHERE IDPRODUTO = ID_PRODUTO_NOVO;
        RETURN VALOR_NEW;
    END
$$ LANGUAGE PLPGSQL;

--EXCLUSÃO DE CLIENTE
CREATE FUNCTION DELET_CLI(IN CPF_CLI VARCHAR(14))
RETURNS VARCHAR
AS $$
DECLARE
	NOME_CLI VARCHAR(30);
	IDCLIENT_DELET INTEGER;
BEGIN
	SELECT IDCLIENTE FROM CLIENTE WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_CLI) INTO IDCLIENT_DELET;
	IF IDCLIENT_DELET IS NULL THEN
		RAISE EXCEPTION 'ESSA PESSOA NÃO É UM CLIENTE';
	ELSE
		SELECT NOME FROM PESSOA WHERE CPF = CPF_CLI INTO NOME_CLI;
		DELETE FROM CESTA WHERE ID_CLIENTE = (SELECT IDCLIENTE FROM CLIENTE WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_CLI));
		DELETE FROM CLIENTE WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_CLI);
		DELETE FROM PESSOA AS P WHERE P.CPF = CPF_CLI;
	END IF;
	RETURN NOME_CLI;
END
$$ LANGUAGE PLPGSQL;

--EXCLUSÃO DE FUNCIONARIOS

CREATE FUNCTION DELET_FUN(IN CPF_FUN VARCHAR(14))
RETURNS VARCHAR
AS $$
DECLARE
	NOME_FUN VARCHAR(30);
	IDPESSOA_FUN INTEGER;
BEGIN
	IF(SELECT IDFUNCIONARIO FROM FUNCIONARIO WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_FUN)) IS NULL THEN
		RAISE EXCEPTION 'ESSA PESSOA NÃO É UM FUNCIONARIO';
	ELSE
		SELECT NOME FROM PESSOA WHERE CPF = CPF_FUN INTO NOME_FUN;
		SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_FUN INTO IDPESSOA_FUN;
		DELETE FROM FUNCIONARIO WHERE ID_PESSOA = IDPESSOA_FUN;
	END IF;
	RETURN NOME_FUN;
END
$$ LANGUAGE PLPGSQL;

--DELETE ITEM CESTA
CREATE FUNCTION DELET_CESTA(IN ID_CESTA INTEGER)
RETURNS VARCHAR
AS $$
DECLARE
	QNT INTEGER;
	ID_PRODUTO_CESTA INTEGER;
	NAME_PRODUTO VARCHAR(20);
BEGIN
	SELECT QNT_ITEM FROM CESTA WHERE IDCESTA = ID_CESTA INTO QNT;
	
	IF QNT IS NULL THEN
		RAISE EXCEPTION 'NÃO Á NENHUMA ITEM NA CESTA COM ESSE ID';
	ELSE
		SELECT ID_PRODUTO FROM CESTA WHERE IDCESTA = ID_CESTA INTO ID_PRODUTO_CESTA;
		DELETE FROM CESTA WHERE IDCESTA = ID_CESTA;
		UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE + QNT WHERE IDPRODUTO = ID_PRODUTO_CESTA;
		SELECT NOME FROM PRODUTO WHERE IDPRODUTO = ID_PRODUTO_CESTA INTO NAME_PRODUTO;
	END IF;
	RETURN NAME_PRODUTO;
END
$$ LANGUAGE PLPGSQL;


--PROCURAR CLIENTE
CREATE FUNCTION SEARCH_CLI(IN CPF_CLI VARCHAR(14))
RETURNS VARCHAR
AS $$
DECLARE
	NOME_CLI VARCHAR(30);
BEGIN
	IF (SELECT IDCLIENTE FROM CLIENTE WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_CLI)) IS NULL THEN
		RAISE EXCEPTION 'NÃO HÁ CLIENTE COM ESSE CPF';
	ELSE
		 SELECT NOME FROM PESSOA WHERE CPF = CPF_CLI INTO NOME_CLI; 
	END IF;
	RETURN NOME_CLI;
END
$$ LANGUAGE PLPGSQL;

--CESTA CLIENTE
CREATE FUNCTION CESTA_CLI(IN CPF_CLI VARCHAR(14))
	RETURNS TABLE (NOME VARCHAR, QNT_ITEM INTEGER)
AS
$$
DECLARE
	ID_CLIENTE_CESTA INTEGER;
BEGIN
	SELECT IDCLIENTE FROM CLIENTE WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_CLI) INTO ID_CLIENTE_CESTA;
	IF ID_CLIENTE_CESTA IS NULL THEN
		RAISE EXCEPTION 'ESSE USUARIO NÃO É UM CLIENTE';
	ELSE
	  IF(SELECT IDCESTA FROM CESTA WHERE ID_CLIENTE = ID_CLIENTE_CESTA) IS NULL THEN
	  	RAISE EXCEPTION 'NÃO HÁ ITENS NA CESTA DESSE CLIENTE';
	  ELSE
	  	RETURN QUERY SELECT PRO.NOME, C.QNT_ITEM FROM PRODUTO AS PRO INNER JOIN CESTA AS C
		ON PRO.IDPRODUTO = C.ID_PRODUTO
		WHERE C.ID_CLIENTE = ID_CLIENTE_CESTA;
	  END IF;
	END IF;
	RETURN;
END;
$$ LANGUAGE PLPGSQL;

--FUNÇÃO PARA INSERÇÃO DE CLIENTE   

CREATE FUNCTION ADD_CLIENTE(IN NAME_CLI varchar(30),IN TELE_CLI varchar(30), IN EMAIL_CLI VARCHAR(30), IN CPF_CLI VARCHAR(30))
RETURNS TABLE (NOME VARCHAR, TELEFONE VARCHAR, EMAIL VARCHAR, CPF VARCHAR) 
AS $$
DECLARE
    ID_PESSOA_CLI INTEGER;
BEGIN
    INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES(NAME_CLI, TELE_CLI, EMAIL_CLI, CPF_CLI);

    SELECT IDPESSOA FROM PESSOA AS P WHERE P.CPF = CPF_CLI INTO ID_PESSOA_CLI;

    INSERT INTO CLIENTE(ID_PESSOA) VALUES(ID_PESSOA_CLI);

    RETURN QUERY SELECT P.NOME, P.TELEFONE, P.EMAIL, P.CPF
    FROM PESSOA AS P WHERE P.CPF = CPF_CLI;
END;
$$ LANGUAGE PLPGSQL;



--FUNÇÃO PARA INSERÇÃO DE FUNCIONARIO   

CREATE FUNCTION ADD_FUNCIONARIO(IN NAME_FUN varchar(30),IN TELE_FUN varchar(30), IN EMAIL_FUN VARCHAR(30), IN CPF_FUN VARCHAR(30),
IN CARGO_FUN VARCHAR(30), IN SALARIO_FUN FLOAT, IN CARTERIA_FUN VARCHAR(12))
RETURNS TABLE (NOME VARCHAR, TELEFONE VARCHAR, EMAIL VARCHAR, CPF VARCHAR, CARGO VARCHAR, SALARIO FLOAT, CARTEIRATRABALHO VARCHAR) 
AS $$
DECLARE
    ID_PESSOA_FUN INTEGER;
BEGIN
    INSERT INTO PESSOA(NOME, TELEFONE, EMAIL, CPF) VALUES(NAME_FUN, TELE_FUN, EMAIL_FUN, CPF_FUN);

    SELECT IDPESSOA FROM PESSOA AS P WHERE P.CPF = CPF_FUN INTO ID_PESSOA_FUN;

    INSERT INTO FUNCIONARIO(ID_PESSOA, CARGO, SALARIO, CARTEIRATRABALHO) VALUES(ID_PESSOA_FUN, CARGO_FUN, SALARIO_FUN, CARTERIA_FUN);

    RETURN QUERY SELECT P.NOME, P.TELEFONE, P.EMAIL, P.CPF, F.CARGO, F.SALARIO, F.CARTEIRATRABALHO
    FROM PESSOA AS P
    INNER JOIN FUNCIONARIO AS F
    ON F.ID_PESSOA = P.IDPESSOA
    WHERE P.IDPESSOA = ID_PESSOA_FUN;
END;    
$$ LANGUAGE PLPGSQL;

--PROCURAR FUNCIONARIO
CREATE FUNCTION SEARCH_FUN(IN CPF_FUN VARCHAR(14))
RETURNS TABLE (NOME VARCHAR, CARGO VARCHAR)
AS $$
DECLARE
BEGIN
	IF (SELECT IDFUNCIONARIO FROM FUNCIONARIO WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA WHERE CPF = CPF_FUN)) IS NULL THEN
		RAISE EXCEPTION 'NÃO HÁ FUNCIONARIO COM ESSE CPF';
	ELSE
		 RETURN QUERY SELECT P.NOME, F.CARGO FROM PESSOA AS P
		 INNER JOIN FUNCIONARIO AS F
		 ON P.IDPESSOA = F.ID_PESSOA
		 WHERE CPF = CPF_FUN; 
	END IF;
END;
$$ LANGUAGE PLPGSQL;


--ADICIONAR ITENS A CESTA DE UM CLIENTE
CREATE FUNCTION ADD_ITEMCESTA(IN CPF_CLI VARCHAR(14), PRODUTO_SELECIONADO VARCHAR(30), QNT_ITEM_CESTA INTEGER)
RETURNS TABLE (NOME VARCHAR, QNT_ITEM INTEGER, VALOR_ITEM FLOAT)
AS $$
	DECLARE 
		ID_PRODUTO_SELECIONADO INTEGER;
		ID_CLIENTE_ADD INTEGER;
BEGIN
	SELECT IDCLIENTE FROM CLIENTE WHERE ID_PESSOA = (SELECT IDPESSOA FROM PESSOA AS P WHERE P.CPF = CPF_CLI) INTO ID_CLIENTE_ADD;
	IF ID_CLIENTE_ADD IS NULL THEN
		RAISE EXCEPTION 'ESSE CPF NÃO É DE UM CLIENTE';
	ELSE
		SELECT PRO.IDPRODUTO FROM PRODUTO AS PRO WHERE PRO.NOME ILIKE PRODUTO_SELECIONADO INTO ID_PRODUTO_SELECIONADO;
		IF ID_PRODUTO_SELECIONADO IS NULL THEN
			RAISE EXCEPTION 'NÃO TEMOS ESSE PRODUTO EM ESTOQUE';
		ELSE
			INSERT INTO CESTA(ID_PRODUTO, ID_CLIENTE, QNT_ITEM) VALUES(ID_PRODUTO_SELECIONADO, ID_CLIENTE_ADD, QNT_ITEM_CESTA);
			RETURN QUERY SELECT PRO.NOME, C.QNT_ITEM, PRO.VALOR FROM PRODUTO AS PRO
			INNER JOIN CESTA AS C
			ON PRO.IDPRODUTO = C.ID_PRODUTO
			WHERE C.ID_CLIENTE = ID_CLIENTE_ADD;
		END IF;	
	END IF;
	RETURN;
END;
$$ LANGUAGE PLPGSQL;

--EXCLUSÃO DE FORNECEDOR
CREATE FUNCTION DELET_FORNECEDOR(IN CNPJ_FORNE VARCHAR(14))
RETURNS VARCHAR
AS $$
DECLARE
	NOME_FORNE VARCHAR(30);
	IDFORNE_DELET INTEGER;
BEGIN
	SELECT IDFORNECEDOR FROM FORNECEDOR AS F WHERE F.CNPJ = CNPJ_FORNE INTO IDFORNE_DELET;
	IF IDFORNE_DELET IS NULL THEN
		RAISE EXCEPTION 'ESSA EMPRESA NÃO É UM FORNECEDOR';
	ELSE
		SELECT NOME FROM FORNECEDOR AS F WHERE F.CNPJ = CNPJ_FORNE INTO NOME_FORNE;
		DELETE FROM FORNECE WHERE ID_FORNECEDOR = IDFORNE_DELET;
		DELETE FROM FORNECEDOR WHERE IDFORNECEDOR = IDFORNE_DELET;
	END IF;
	RETURN NOME_FORNE;
END
$$ LANGUAGE PLPGSQL;

--PROCURA DE UM FORNECEDOR
CREATE FUNCTION SEARCH_FORNECEDOR(IN CNPJ_FORNE VARCHAR(14))
RETURNS VARCHAR
AS $$
DECLARE
	NOME_FORNE VARCHAR(30);
BEGIN
	IF (SELECT IDFORNECEDOR FROM FORNECEDOR WHERE CNPJ = CNPJ_FORNE) IS NULL THEN
		RAISE EXCEPTION 'NÃO HÁ FORNECEDOR COM ESSE CNPJ';
	ELSE
		 SELECT NOME FROM FORNECEDOR WHERE CNPJ = CNPJ_FORNE INTO NOME_FORNE; 
	END IF;
	RETURN NOME_FORNE;
END
$$ LANGUAGE PLPGSQL;

--ATUALIZANDO VALOR DO PREÇO AO ITEM VENDIDO 
CREATE FUNCTION ATUALIZA_FORNE(IN NOME_PRODUTO VARCHAR(30), IN VALOR_NEW FLOAT) RETURNS FLOAT
AS $$
    BEGIN
        UPDATE FORNECE SET VALOR_ITEM = VALOR_NEW WHERE ID_PRODUTO = (SELECT IDPRODUTO FROM PRODUTO WHERE NOME = NOME_PRODUTO);
        RETURN VALOR_NEW;
    END
$$ LANGUAGE PLPGSQL;

--ADICIONAR FORNECEDOR
CREATE FUNCTION ADD_FORNECEDOR(IN NOME_FOR VARCHAR(30), IN TELEFONE_FOR VARCHAR(11), IN ENDERECO_FOR VARCHAR(30) ,IN EMAIL_FOR VARCHAR(30), IN CNPJ_FOR VARCHAR(14))
RETURNS TABLE (NOME VARCHAR, TELEFONE VARCHAR, ENDERECO VARCHAR, EMAIL VARCHAR, CNPJ VARCHAR)
AS $$
BEGIN
	INSERT INTO FORNECEDOR(NOME, TELEFONE, ENDERECO, EMAIL, CNPJ) VALUES(NOME_FOR, TELEFONE_FOR, ENDERECO_FOR,EMAIL_FOR, CNPJ_FOR);
	RETURN QUERY SELECT F.NOME, F.TELEFONE, F.ENDERECO, F.EMAIL, F.CNPJ FROM FORNECEDOR AS F WHERE F.CNPJ = CNPJ_FOR;
END;
$$ LANGUAGE PLPGSQL;

--PROCURAR PRODUTO QUE FORNECE
CREATE FUNCTION FORNECE_SEARCH(IN CNPJ_FOR VARCHAR(14))
RETURNS TABLE (NOME VARCHAR, QNT_ITEM INTEGER)
AS $$
	DECLARE 
	ID_FORNE_SEARCH INTEGER;
	ID_FORNECE INTEGER;
BEGIN
		SELECT F.IDFORNECEDOR FROM FORNECEDOR AS F WHERE F.CNPJ = CNPJ_FOR INTO ID_FORNE_SEARCH;
	IF ID_FORNE_SEARCH IS NULL THEN
		RAISE EXCEPTION 'ESSE CNPJ NÃO É UM FORNECEDOR';
	ELSE
		SELECT IDFORNECE FROM FORNECE WHERE ID_FORNECEDOR = ID_FORNE_SEARCH INTO ID_FORNECE;
	  IF ID_FORNECE IS NULL THEN
	  	RAISE EXCEPTION 'NÃO HÁ ITENS NA FORNECIDOS POR ESSE FORNECEDOR';
	  ELSE
	  	RETURN QUERY SELECT PRO.NOME, FORNE.QNT_ITEM FROM PRODUTO AS PRO INNER JOIN FORNECE AS FORNE
		ON PRO.IDPRODUTO = FORNE.ID_PRODUTO
		WHERE FORNE.ID_FORNECEDOR = ID_FORNE_SEARCH;
	  END IF;
	END IF;
	RETURN;
END;
$$ LANGUAGE PLPGSQL;

--ADICIONAR ITEM QUE FORNECE

CREATE FUNCTION ADD_FORNECE(IN NOME_PRODUTO VARCHAR(30), IN CNPJ_FORNE VARCHAR(14),IN VALORITEM_FORNECE FLOAT, IN QUANTIDADE_ITEM_FORNECE INT)
RETURNS TABLE(NOME VARCHAR, QNT_ITEM INTEGER, VALOR_ITEM FLOAT)
AS $$
DECLARE 
		ID_PRODUTO_SELECIONADO INTEGER;
		ID_FORNECEDOR_ADD INTEGER;
BEGIN
	SELECT IDFORNECEDOR FROM FORNECEDOR AS F WHERE F.CNPJ = CNPJ_FORNE INTO ID_FORNECEDOR_ADD;
	IF ID_FORNECEDOR_ADD IS NULL THEN
		RAISE EXCEPTION 'ESSE CNPJ NÃO É DE UM FORNECEDOR';
	ELSE
		SELECT PRO.IDPRODUTO FROM PRODUTO AS PRO WHERE PRO.NOME ILIKE NOME_PRODUTO INTO ID_PRODUTO_SELECIONADO;
		IF ID_PRODUTO_SELECIONADO IS NULL THEN
			RAISE EXCEPTION 'PRODUTO NÃO CADASTRADO NO ESTOQUE';
		ELSE
			INSERT INTO FORNECE(ID_PRODUTO, ID_FORNECEDOR, QNT_ITEM, VALOR_ITEM) VALUES(ID_PRODUTO_SELECIONADO, ID_FORNECEDOR_ADD, QUANTIDADE_ITEM_FORNECE,
			VALORITEM_FORNECE);
			
			RETURN QUERY SELECT P.NOME, F.QNT_ITEM, F.VALOR_ITEM FROM PRODUTO AS P
			INNER JOIN FORNECE AS F
			ON P.IDPRODUTO = F.ID_PRODUTO
			WHERE F.ID_FORNECEDOR = ID_FORNECEDOR_ADD;
		END IF;
	END IF;
END
$$ LANGUAGE PLPGSQL;

--ADICIONAR PRODUTOS
CREATE FUNCTION ADD_PRODUCT(IN NOME_PRODUTO VARCHAR(30), VALOR_PRODUTO FLOAT, VALIDADE_PRODUTO DATE, TIPO_PRODUTO VARCHAR(30), QUANTIDADE_PRODUTO VARCHAR(30))
RETURNS TABLE (NOME VARCHAR, VALOR FLOAT, VALIDADE DATE, TIPO VARCHAR, QUANTIDADE INT)
AS $$
DECLARE COMPARATION_ID INTEGER;
BEGIN
	SELECT IDPRODUTO FROM PRODUTO WHERE NOME ILIKE NOME_PRODUTO INTO COMPARATION_ID;
	IF COMPARATION_ID IS NULL THEN
		INSERT INTO PRODUTO(NOME, VALOR, VALIDADE, TIPO, QUANTIDADE) VALUES(NOME_PRODUTO, VALOR_PRODUTO, VALIDADE_PRODUTO, TIPO_PRODUTO, QUANTIDADE_PRODUTO);
		RETURN QUERY SELECT NOME, VALOR, VALIDADE, TIPO, QUANTIDADE FROM PRODUTO WHERE NOME = NOME_PRODUTO;
	ELSE
		RAISE EXCEPTION 'PRODUTO JA CADASTRADO NO CATALOGO';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

--PROCURAR PRODUTO
CREATE FUNCTION SEARCH_PRODUCT(IN NOME_PRODUTO VARCHAR(30))
RETURNS TABLE (NOME VARCHAR, VALOR FLOAT, QUANTIDADE INTEGER)
AS $$
DECLARE
	ID_PRODUTO_SEARCH INTEGER;
BEGIN
	SELECT IDPRODUTO FROM PRODUTO WHERE NOME = NOME_PRODUTO INTO ID_PRODUTO_SEARCH;
	IF ID_PRODUTO_SEARCH IS NULL THEN
		RAISE EXCEPTION 'PRODUTO NÃO ESTÁ NO CATALOGO';
	ELSE
		RETURNS QUERY SELECT NOME, VALOR, QUANTIDADE FROM PRODUTO WHERE NOME = NOME_PRODUTO;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

--EXCLUIR PRODUTO
CREATE FUNCTION DELET_PRODUCT(IN NOME_PRODUTO VARCHAR(30))
RETURNS VARCHAR
AS $$
DECLARE
	ID_PRODUTO_SEARCH INTEGER;
	NAME_PRODUCT VARCHAR(30);
BEGIN
	SELECT IDPRODUTO FROM PRODUTO WHERE NOME ILIKE NOME_PRODUTO INTO ID_PRODUTO_SEARCH;
	IF ID_PRODUTO_SEARCH IS NULL THEN
		RAISE EXCEPTION 'PRODUTO NÃO ESTÁ NO CATALOGO';
	ELSE
		DELETE FROM FORNECE WHERE ID_PRODUTO = ID_PRODUTO_SEARCH;
		DELETE FROM CESTA WHERE ID_PRODUTO = ID_PRODUTO_SEARCH;
		SELECT NOME FROM PRODUTO WHERE NOME ILIKE NOME_PRODUTO INTO NAME_PRODUCT;
		DELETE FROM PRODUTO WHERE NOME ILIKE NOME_PRODUTO;
	END IF;
	RETURN NAME_PRODUCT;
END;
$$ LANGUAGE PLPGSQL;